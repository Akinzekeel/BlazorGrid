@typeparam TRow
<div @attributes="FinalAttributes">
    <div class="grid-scrollview" style="grid-template-columns: @GridColumns">
        <header class="grid-row grid-header">
            <CascadingValue Value="this" IsFixed="true">
                @ChildContent(null)
            </CascadingValue>
        </header>
        @if (LoadingError != null)
        {
            <div style="grid-column: span @Columns.Count()">
                <div class="empty text-error">
                    <div class="empty-title">
                        <h2>@Resources.LoadingError_Title</h2>
                    </div>
                    <div class="empty-subtitle">@Resources.LoadingError_Text</div>
                    <small class="d-block">@LoadingError.Message</small>
                </div>
            </div>
        }
        else if (Rows == null)
        {
            <div style="grid-column: span @Columns.Count()">
                <div class="empty">
                    <div class="empty-title">
                        <h2 class="loading"></h2>
                    </div>
                    <div class="empty-subtitle">@Resources.Loading_Text</div>
                </div>
            </div>
        }
        else if (Rows.Count == 0)
        {
            <div style="grid-column: span @Columns.Count()">
                <div class="empty">
                    <h5 class="empty-title">@Resources.Empty_Title</h5>
                    @if (string.IsNullOrEmpty(QueryDebounced))
                    {
                        <p class="empty-subtitle">@Resources.Empty_Text</p>
                    }
                    else
                    {
                        <p class="empty-subtitle">@Resources.Empty_Text_Filtered</p>
                    }
                </div>
            </div>
        }
        else
        {
            for (int i = 0; i < Rows.Count; i++)
            {
                var index = i;
                var r = Rows.ElementAt(i);
                var clickable = OnClick.HasDelegate || Href != null;
                <div class="grid-row @(clickable ? "clickable" : "")" @onclick="_ => OnRowClicked(r, index)">
                    @ChildContent(r)
                </div>
            }
            <div style="grid-column: span @Columns.Count()">
                <div class="empty pt-3">
                    <div class="empty-subtitle">@string.Format(Resources.Footer_RowCount, Rows.Count, TotalCount)</div>
                    @if (Rows.Count < TotalCount)
                    {
                        <button disabled="@IsLoadingMore" class="btn btn-secondary @(IsLoadingMore ? "loading" : "")" @onclick="() => LoadMoreAsync()">@Resources.Footer_LoadMoreBtnLabel</button>
                    }
                </div>
            </div>
        }
    </div>
</div>