@layout ExampleLayout
@page "/examples/events"
@implements IDisposable
<h1>Events</h1>

<p>Currently, BlazorGrid only has one event called <code>OnAfterRowClicked</code> which you can bind to. As the name implies, this event is fired after a row has been clicked and after the <code>Href</code> function or the <code>OnClick</code> delegate have been executed.</p>
<p>The event is useful if you need to write some type of plugin or need to be notified of row interactions programmatically.</p>
<p>The event fires with an <code>int</code> as the argument. This is the index of the row which was clicked. If you need the entire row object, you can access it via the grid instance's <code>Rows</code> property. Note that this event always fires when a row is clicked - even when neither <code>Href</code> nor <code>OnClick</code> are provided.</p>
<p><b>Remember to implement <code>IDisposable</code> and un-register your delegate(s) on <code>Dispose()</code></b></p>

<div class="card mb-3">
    <div class="card-body">
        @if (clickedIndex > -1)
        {
            <span>You have clicked row index: <code>@clickedIndex</code></span>
        }
        else
        {
            <span>Click on a row to see the index here.</span>
        }
    </div>
</div>

<Tabs>
    <Tab Caption="Result" class="p-3">
        <BlazorGrid @ref="grid" TRow="Employee" SourceUrl="data/employees.json" style="max-height: 340px;">
            <StaticGridCol FitToContent="true">
                <img src="@context.Avatar" style="width: 20px; height: 20px;" />
            </StaticGridCol>
            <GridCol For="() => context.Id" FitToContent="true">
                @context.Id
            </GridCol>
            <GridCol For="() => context.FirstName">
                @context.FirstName
            </GridCol>
            <GridCol For="() => context.LastName">
                @context.LastName
            </GridCol>
            <GridCol For="() => context.Email">
                <a href="mailto:@context.Email">@context.Email</a>
            </GridCol>
        </BlazorGrid>
    </Tab>
    <Tab Caption="Code" class="p-3">
        <h6>Razor</h6>
        <pre class="pre-scrollable"><code>&lt;BlazorGrid @@ref=&quot;grid&quot; TRow=&quot;Employee&quot; SourceUrl=&quot;data/employees.json&quot;&gt;
    &lt;StaticGridCol FitToContent=&quot;true&quot;&gt;
        &lt;img src=&quot;@@context.Avatar&quot; style=&quot;width: 20px; height: 20px;&quot; /&gt;
    &lt;/StaticGridCol&gt;
    &lt;GridCol For=&quot;() => context.Id&quot; FitToContent=&quot;true&quot; /&gt;
    &lt;GridCol For=&quot;() => context.FirstName&quot; /&gt;
    &lt;GridCol For=&quot;() => context.LastName&quot; /&gt;
    &lt;GridCol For=&quot;() => context.Email&quot;&gt;
        &lt;a href=&quot;mailto:@@context.Email&quot;&gt;@@context.Email&lt;/a&gt;
    &lt;/GridCol&gt;
&lt;/BlazorGrid&gt;

@@code
{
    public BlazorGrid.Components.BlazorGrid&lt;Employee&gt; grid { get; set; }
    private int clickedIndex { get; set; } = -1;

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            grid.OnAfterRowClicked += rowClicked;
        }
    }

    private void rowClicked(object sender, int index)
    {
        clickedIndex = index;
        StateHasChanged();
    }

    public void Dispose()
    {
        grid.OnAfterRowClicked -= rowClicked;
    }
}</code></pre>
    </Tab>
</Tabs>
@code
{
    public BlazorGrid.Components.BlazorGrid<Employee> grid { get; set; }
    private int clickedIndex { get; set; } = -1;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            grid.OnAfterRowClicked += rowClicked;
        }
    }

    private void rowClicked(object sender, int index)
    {
        clickedIndex = index;
        StateHasChanged();
    }

    public void Dispose()
    {
        grid.OnAfterRowClicked -= rowClicked;
    }
}