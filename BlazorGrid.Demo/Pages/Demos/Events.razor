@layout DemoLayout
@page "/demos/events"
@implements IDisposable
<h1>Events</h1>
<p>Currently, BlazorGrid only has one event called <code>OnAfterRowClicked</code> which you can bind to. As the name implies, this event is fired after a row has been clicked and after the <code>Href</code> function or the <code>OnClick</code> delegate have been executed.</p>
<p>The event is useful if you need to write some type of plugin or need to be notified of row interactions programmatically.</p>
<p>The event fires with an <code>int</code> as the argument. This is the index of the row which was clicked. If you need the entire row object, you can access it via the grid instance's <code>Rows</code> property. Note that this event always fires when a row is clicked - even when neither <code>Href</code> nor <code>OnClick</code> are provided.</p>
<div class="card">
    <div class="card-body">
        You have clicked row index: <code>@clickedIndex</code>
    </div>
</div>
@if(ShowCode)
{
    <pre class="code" data-lang="Razor"><code class="bg-dark text-light"></code></pre>
}
else
{
    <div>
        <BlazorGrid @ref="grid" TRow="Employee" SourceUrl="Data/employees.json">
            <GridCol FitToContent="true">
                <img src="@context.Avatar" style="width: 20px; height: 20px;" />
            </GridCol>
            <GridCol Caption="#" FitToContent="true">
                @context.Id
            </GridCol>
            <GridCol Caption="First name">
                @context.FirstName
            </GridCol>
            <GridCol Caption="Last name">
                @context.LastName
            </GridCol>
            <GridCol Caption="Email address">
                <a href="mailto:@context.Email">@context.Email</a>
            </GridCol>
        </BlazorGrid>
    </div>
}
@code
{
    public bool ShowCode { get; set; }
    public BlazorGrid.Components.BlazorGrid<Employee> grid { get; set; }
    private int? clickedIndex { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            grid.OnAfterRowClicked += rowClicked;
        }
    }

    private void rowClicked(object sender, int index)
    {
        clickedIndex = index;
        StateHasChanged();
    }

    public void Dispose()
    {
        grid.OnAfterRowClicked -= rowClicked;
    }
}