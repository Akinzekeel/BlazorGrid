@page "/getting-started"
@inherits CommonPageBase
<div class="container py-2 py-md-3 py-lg-4 py-xl-5 ">
    <h1>@Title</h1>
    <p class="lead mb-5">Follow this quick guide to get started with BlazorGrid in just a few minutes. After you finished setting it up and got the basic grid working, you can head over to the <a href="/examples">examples</a> or the <a href="/docs">documentation</a> to learn more about additional features and customization.</p>

    <Tabs Style="Tabs.TabsStyle.Buttons">

        <Tab Caption="WebAssembly">

            @{
                int ol = 1;
            }

            <h5 class="mt-5">@(ol++). Create your project</h5>
            <p>In Visual Studio, create a new Blazor WebAssembly project. During the project creation wizard, check the <em>Asp.Net Core hosted</em> option. This will create a .Net Core backend project which will also serve the static files for the frontend.</p>
            <p>Alternatively, you can use the following <em>dotnet</em> command: <code>dotnet new wasm --hosted -n GettingStarted</code></p>

            <Tip Heading="Why Asp.Net Core hosted?">
                BlazorGrid also works without the <em>Asp.Net Core hosted</em> option, of course. However, in that scenario you would need to configure your solution to start multiple projects on different ports which goes beyond the scope of this tutorial.
            </Tip>

            <h5 class="mt-5">@(ol++). Install the NuGet packages</h5>
            <p>In your <em>Client</em> project, install the <code>Akinzekeel.BlazorGrid</code> package. In the <em>Shared</em> project, install <code>Akinzekeel.BlazorGrid.Abstractions</code> (this is an optional package which contains some extension methods).</p>

            <h5 class="mt-5">@(ol++). Update the WeatherForecastController</h5>
            <p>In the <em>Server</em> project, open the <code>Controllers/WeatherForecastController.cs</code> file and replace the contents with the following code:</p>
            <pre class="pre-scrollable"><code>using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Mvc;
using GettingStarted.Shared;
using BlazorGrid.Abstractions;
using BlazorGrid.Abstractions.Extensions;

namespace GettingStarted.Server.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class WeatherForecastController : ControllerBase
    {
        private static readonly IQueryable&lt;WeatherForecast&gt; WeatherData;
        private static readonly string[] Summaries = new[]
        {
            "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
        };

        static WeatherForecastController()
        {
            var rng = new Random();

            // Statically set the weather data so the filtering and sorting
            // won't cause new random data to be generated on every request
            WeatherData = Enumerable.Range(1, 200).Select(index =&gt; new WeatherForecast
            {
                Date = DateTime.Now.AddDays(index),
                TemperatureC = rng.Next(-20, 55),
                Summary = Summaries[rng.Next(Summaries.Length)]
            })
            .AsQueryable();
        }

        [HttpPost]
        public IActionResult Index(BlazorGridRequest request)
        {
            if (request.Offset &lt; 0)
            {
                return BadRequest();
            }

            if (request.Length &lt; 1)
            {
                return BadRequest("Invalid length (must be 1 or more)");
            }
            else if (request.Length &gt; 100)
            {
                return BadRequest("Invalid length (must be 100 or less)");
            }

            var q = WeatherData;

            if (!string.IsNullOrEmpty(request.Query))
            {
                // Apply filtering based on the search query from the
                // data grid's search input box
                q = q.Where(x =&gt; x.Summary.StartsWith(request.Query));
            }

            var totalCount = q.Count();

            if (totalCount == 0)
            {
                // Nothing matches the filters
                return Ok(new BlazorGridResult&lt;WeatherForecast&gt;
                {
                    Data = new List&lt;WeatherForecast&gt;(),
                    TotalCount = 0
                });
            }

            // Apply ordering
            if (request.OrderBy != null)
            {
                // These are extension methods to apply sorting
                // with Linq based only on the property name.
                //
                // You need either the BlazorGrid or the
                // BlazorGrid.Abstractions Nuget package to use these.

                if (request.OrderByDescending)
                {
                    q = q.OrderByDescending(request.OrderBy);
                }
                else
                {
                    q = q.OrderBy(request.OrderBy);
                }
            }

            // Apply paging
            if (request.Offset &gt; 0)
            {
                q = q.Skip(request.Offset);
            }

            if (totalCount &gt; request.Length)
            {
                q = q.Take(request.Length);
            }

            var rows = q.ToList();

            return Ok(new BlazorGridResult&lt;WeatherForecast&gt;
            {
                Data = rows,
                TotalCount = totalCount
            });
        }
    }
}</code></pre>

            <h5 class="mt-5">@(ol++). Add a reference to the BlazorGrid stylesheet</h5>
            <p>In the <em>Client</em> project, go to <code>wwwroot/index.html</code> and add the following line to the <code>head</code> section:</p>
            <pre class="pre-scrollable"><code>&lt;link href="_content/Akinzekeel.BlazorGrid/dist/blazorgrid-bootstrap.min.css" rel="stylesheet" /&gt;</code></pre>

            <h5 class="mt-5">@(ol++). Set up the BlazorGrid configuration</h5>
            <p>Every instance of the BlazorGrid uses a common configuration object. This can be used to customize CSS class names among other things. To set up the default configuration for Bootstrap, go to <code>Program.cs</code> in your <em>Client</em> project and make the following modifications:</p>


            <pre class="pre-scrollable"><code><mark>using BlazorGrid.Extensions;</mark>
...

namespace GettingStarted.Client
{
    public class Program
    {
        public static async Task Main(string[] args)
        {
            var builder = WebAssemblyHostBuilder.CreateDefault(args);
            builder.RootComponents.Add&lt;App&gt;("app");

            builder.Services.AddTransient(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });
            <mark>builder.Services.AddBlazorGrid();</mark>

            await builder.Build().RunAsync();
        }
    }
}</code></pre>

            <h5 class="mt-5">@(ol++). Replace the default table with a BlazorGrid component</h5>
            <p>Open the <code>Pages/FetchData.razor</code> file in the <em>Client</em> project and replace the contents with the following code:</p>
            <pre class="pre-scrollable"><code>@@page "/fetchdata"
@@using blazorgrid_guide_test.Shared
@@using BlazorGrid.Abstractions
@@using BlazorGrid.Components
@@using System.Text.Json
@@using System.Threading
@@inject HttpClient Http

&lt;h1&gt;Weather forecast&lt;/h1&gt;

&lt;p&gt;This component demonstrates fetching data from the server.&lt;/p&gt;

&lt;div style="height: 400px;"&gt;
    &lt;BlazorGrid TRow="WeatherForecast" DefaultOrderBy="x =&gt; x.Date" Provider="LoadData"&gt;
        &lt;GridCol For="() =&gt; context.Date" Caption="Date" /&gt;
        &lt;GridCol For="() =&gt; context.TemperatureC" Caption="Temp. (C)" /&gt;
        &lt;GridCol For="() =&gt; context.TemperatureF" Caption="Temp. (F)" /&gt;
        &lt;GridCol For="() =&gt; context.Summary" Caption="Summary" /&gt;
    &lt;/BlazorGrid&gt;
&lt;/div&gt;

@@code
{
    private async ValueTask&lt;BlazorGridResult&lt;WeatherForecast&gt;&gt; LoadData(BlazorGridRequest request, CancellationToken cancellationToken)
    {
        var response = await Http.PostAsJsonAsync("WeatherForecast", request, cancellationToken);

        // Deserialize the Json response
        var json = await response.Content.ReadAsStringAsync();
        var result = JsonSerializer.Deserialize&lt;BlazorGridResult&lt;WeatherForecast&gt;&gt;(json);

        return result;
    }
}</code></pre>

            <h5 class="mt-5">@(ol++). Adjust Json serialization settings</h5>
            <p>Lastly, you will need to use lowercase for Json property names when deserializing objects with the model binder, since this is the default setting for Blazor WebAssembly.</p>
            <p>Navigate to <code>Startup.cs</code> in your <em>Server</em> project and change this line:</p>
            <pre class="pre-scrollable"><code>services.AddControllersWithViews();</code></pre>
            <p>To this:</p>
            <pre class="pre-scrollable"><code>services.AddControllersWithViews()
    .AddJsonOptions(o =>
    {
        o.JsonSerializerOptions.PropertyNamingPolicy = null;
    });</code></pre>

            <p class="lead mt-5">That's all! If you run the project and you did everything correctly, the fetch data page should look like this:</p>
            <img class="img-fluid img-thumbnail" src="/img/GettingStartedSampleScreenshot.jpg" alt="Screenshot of the resulting grid" />
        </Tab>
    </Tabs>

</div>
@code
{
    protected override string Title => "Getting started";
}