<ul @attributes="OtherAttributes" class="@NavClass()">
    @for (int i = 0; i < Children.Count; i++)
    {
        var j = i;
        var tab = Children.ElementAt(i);
        <li class="nav-item">
            <a class="nav-link clickable @(i == ActiveTabIndex ? "active" : null)" @onclick="() => ShowTab(j)">@tab.Caption</a>
        </li>
    }
</ul>
<CascadingValue Value="this">
    <div class="tab-content">
        @ChildContent
    </div>
</CascadingValue>
@code
{
    public enum TabsStyle
    {
        Tabs,
        Buttons
    }

    [Parameter] public TabsStyle Style { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> Attributes { get; set; }

    public int ActiveTabIndex { get; private set; }
    private List<Tab> Children { get; set; } = new List<Tab>();

    private IEnumerable<KeyValuePair<string, object>> OtherAttributes => Attributes?.Where(x => x.Key != "class");

    private string NavClass()
    {
        var classes = "nav";

        if (Attributes?.ContainsKey("class") == true)
        {
            classes += " " + Attributes["class"];
        }

        if(Style == TabsStyle.Buttons)
        {
            classes += " nav-pills";
        }
        else
        {
            classes += " nav-tabs";
        }

        return classes;
    }

    public int Add(Tab child)
    {
        Children.Add(child);
        StateHasChanged();
        return Children.Count - 1;
    }

    private void ShowTab(int index)
    {
        ActiveTabIndex = index;
    }
}